import java.util.Random;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter your name:");
        String usersName = scanner.nextLine();

        int[][] field = new int[7][7];
        String[][] displayField = new String[7][7];

        buildTheField(displayField);

        placeShip(field, 3);
        placeShip(field, 2);
        placeShip(field, 2);
        placeShip(field, 1);
        placeShip(field, 1);
        placeShip(field, 1);
        placeShip(field, 1);
        
        playGame(field, displayField);
    }
    
    
    public static void buildTheField(String[][] displayField) {
        System.out.println("    1  2  3  4  5  6  7");
        for (int i = 0; i < 7; i++) {
            System.out.print((i + 1) + " |");
            for (int j = 0; j < 7; j++) {
                displayField[i][j] = " ~ ";
                System.out.print(displayField[i][j]);
            }
            System.out.println("|");
        }
        System.out.println("   ---------------------");
    }
    
    
    public static void placeShip(int[][] field, int size) {
        Random random = new Random();
       
        while (true) {
            int row = random.nextInt(7);
            int column = random.nextInt(7);
            int direction = random.nextInt(2);

            if (isShipPlacementValid(field, row, column, size, direction)) {
                for (int i = 0; i < size; i++) {
                    if (direction == 0) {
                        field[row][column + i] = 1;
                    } else {
                        field[row + i][column] = 1;
                    }
                }
                break;
            }
        }
    }


    public static boolean isShipPlacementValid(int[][] field, int row, int column, int size, int direction) {
        if (direction == 0 && column + size > 7) {
            return false;
        } else if (direction == 1 && row + size > 7) {
            return false;
        }

        for (int i = 0; i < size; i++) {
            if (direction == 0 && field[row][column + i] == 1) {
                return false;
            } else if (direction == 1 && field[row + i][column] == 1) {
                return false;
            }

            if (hasAdjacentShipAtCorners(field, row, column, size, direction)) {
                return false;
            }
        }

        return true;
    }


    public static boolean hasAdjacentShipAtCorners(int[][] field, int row, int column, int size, int direction) {
        for (int i = -1; i <= size; i++) {
            for (int j = -1; j <= 1; j++) {
                int adjacentRow  = row + i;
                int adjacentColumn = column + j;

                if (adjacentRow >= 0 && adjacentRow < 7 && adjacentColumn >= 0 && adjacentColumn < 7 && field[adjacentRow][adjacentColumn] == 1) {
                    return true;
                }
            }
        }
        return false;
    }
    
    
    public static void playGame(int[][] field, String[][] displayField) {
        Scanner scanner = new Scanner(System.in);
        int totalShips = 11; 
        int shots = 0;

        while (totalShips > 0) {
            System.out.println("Enter the coordinates of the shot: ");
            int usersRow = scanner.nextInt() - 1;
            int usersColumn = scanner.nextInt() - 1;
            
            if (usersRow < 0 || usersRow >= 7 || usersColumn < 0 || usersColumn >= 7) {
                System.out.println("Invalid coordinates. Try again.");
                continue;
            }

            if (displayField[usersRow][usersColumn].equals(" M ") || displayField[usersRow][usersColumn].equals(" X ") || displayField[usersRow][usersColumn].equals(" ■ ")) {
                System.out.println("You've already shot at this cell. Try again.");
                continue;
            }

            if (field[usersRow][usersColumn] == 1) {
                displayField[usersRow][usersColumn] = " ■ ";
                field[usersRow][usersColumn] = 2;  
                totalShips--;

                if (isShipSunk(field, usersRow, usersColumn)) {
                    markSunkShip(displayField, field, usersRow, usersColumn);
                }
            } else {
                displayField[usersRow][usersColumn] = " M ";
            }
            
            clearConsole();
            
            printField(displayField);

            shots++;
        }
    
        clearConsole();    
        System.out.println("Congratulations! You sank all the ships in " + shots + " shots.");
        System.out.println("\nDo you want to start a new game?");
        scanner.nextLine();
        String usersAnswer = scanner.nextLine();
        if (usersAnswer.equals("yes") || usersAnswer.equals("Yes")) {
            buildTheField(displayField);
            placeShip(field, 3);
            placeShip(field, 2);
            placeShip(field, 2);
            placeShip(field, 1);
            placeShip(field, 1);
            placeShip(field, 1);
            placeShip(field, 1);
        
            playGame(field, displayField);
        }
        else {
            return;
        }
    }
        
    
    
    public static boolean isShipSunk(int[][] field, int row, int column) {
        int size = field[row][column];
        for (int i = 0; i < size; i++) {
            if (column + i < 7 && field[row][column + i] != 2) {
                return false;
            }
        }
 
        for (int i = 0; i < size; i++) {
            if (row + i < 7 && field[row + i][column] != 2) {
                return false; 
            }
        }
        return true;
    }
    

    public static void markSunkShip(String[][] displayField, int[][] field, int row, int column) {
        int size = field[row][column];

        for (int i = 0; i < size; i++) {
            displayField[row][column + i] = " X ";
        }

        for (int i = 0; i < size; i++) {
            displayField[row + i][column] = " X ";
        }
    }


    public static void printField(String[][] displayField) {
        System.out.println("    1  2  3  4  5  6  7");
        for (int i = 0; i < 7; i++) {
            System.out.print((i + 1) + " |");
            for (int j = 0; j < 7; j++) {
                System.out.print(displayField[i][j]);
            }
            System.out.println("|");
        }
        System.out.println("   ---------------------");
    }
   
   
    public static void clearConsole() {
        System.out.print("\033[H\033[2J");
        System.out.flush();
    }
}